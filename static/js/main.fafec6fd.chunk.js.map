{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","database","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oOAqDeA,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKC,UAAU,2DACX,yBAAKC,IAAG,+BAA2BJ,GAAMK,IAAI,WAC7C,6BACI,4BAAKJ,GACL,2BAAIC,MCgBLI,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,kBAAC,EAAD,CACIC,IAAKJ,EAAOG,GAAGV,GACfA,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCpC9BU,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,6BACI,2BACIX,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCOXI,EAZA,SAACC,GACZ,OAKI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCYJC,E,kDApBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACGO,MAAQ,CACTC,UAAU,GAHH,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAME,MACH,yDAEJE,KAAKX,MAAMK,a,GAhBEQ,aC6PbC,G,wDAtDX,aAAe,IAAD,8BACV,gBAmBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SApB1C,EAAKX,MAAQ,CACTY,SAAU,GACVzB,YAAa,IAEjB0B,QAAQC,IAAI,eANF,E,gEASO,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKd,SAAS,CAACO,SAAUO,OAEjCN,QAAQC,IAAI,uB,+BAUN,IAAD,EAC2BV,KAAKJ,MAA9Bb,EADF,EACEA,YAAayB,EADf,EACeA,SACdQ,EAAiBR,EAASS,QAAO,SAAAC,GACnC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASrC,EAAYoC,kBAMzD,OAJAV,QAAQC,IAAI,UAIJF,EAASa,OAGT,yBAAKhD,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KAEI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU3B,OAAQuC,OARlC,2C,GApCUd,cC5LEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCsBNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLW,QAAQX,MAAMA,EAAMwC,a","file":"static/js/main.fafec6fd.chunk.js","sourcesContent":["import React from 'react';\n\n// Learned in 209: Building A React App 1\n// Version 1\n// Add props in, so that Card knows that it needs to accept these parameters\n// Add the $ when using javascript expressions\n// Surround it with backticks `` and curly brackets as it's a javascript expression {}\n\n// const Card = (props) => {\n//     return (\n//         <div className='bg-light-green dib br3 br3 pa3 ma2 grow bw2 shadow-5 tc'>\n//             <img src ={`https://robohash.org/${props.id}`} alt='robots' />\n//             <div>\n//                 <h2>{props.name}</h2>\n//                 <p>{props.email}</p>\n//             </div>\n//         </div>\n//     )\n//     }\n\n// Version 1.1\n// Destructure the incoming props (properties) to simplify the props expression\n\n// const Card = (props) => {\n//     const {id, name, email} = props; // Destructuring - Makes code neater\n//     return (\n//         <div className='bg-light-green dib br3 br3 pa3 ma2 grow bw2 shadow-5 tc'>\n//             <img src ={`https://robohash.org/${id}`} alt='robots' />\n//             <div>\n//                 <h2>{name}</h2>\n//                 <p>{email}</p>\n//             </div>\n//         </div>\n//     )\n//     }\n\n// Version 1.2\n// Destructure even further\n\nconst Card = ({id, name, email}) => { // Destructuring here\n    return (\n        <div className='bg-light-green dib br3 br3 pa3 ma2 grow bw2 shadow-5 tc'>\n            <img src ={`https://robohash.org/${id}`} alt='robots' />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n    }\n\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js';\n\n// Learned in 211: Building a React App 2\n// Version 2\n// Shifted code from index.js to CardList.js\n\n// const CardList = ({robots}) => {\n//     return (\n//         <div>\n//             <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n//             <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n//             <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n//       </div>\n//     )\n// }\n\n// Version 2.1\n// Created a loop using .map\n\n// const CardList = ({robots}) => {\n//     const cardArray = robots.map((user,i) => {\n//         return (\n//             <Card\n//                 key={robots[i].id}\n//                 id={robots[i].id}\n//                 name={robots[i].name}\n//                 email={robots[i].email}\n//             />)\n//     })\n\n//     return (\n//         <div>\n//             {cardArray}\n//       </div>\n//     )\n// }\n\n// Version 2.2\n// Everything inside the curly brackets is JavaScript, so we can cut and paste and place the code inside the <div>\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {\n                robots.map((user,i) => {\n                    return (\n                        <Card\n                            key={robots[i].id}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    )\n                })\n            }\n      </div>\n    )\n}\n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchchange }) => {\n    return (\n        <div>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='Search robots'\n                onChange={searchchange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\n// Version 5\n \nconst Scroll = (props) => {\n    return (\n        // This style creates a scrolling section for CardList, so that the SearchBox is always visible\n        // We're able to add styles using JSX by writing it as a JavaScript expression\n        // - Curly brackets (as it's a JavaScript expression)\n        // - camelCase, e.g. overflowY\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n            this.state = {\n                hasError: false\n            }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        if(this.state.error) {\n            return <h1>Oooops. That is not good.</h1>\n        }\n        return this.props.children\n    };\n\n};\n\nexport default ErrorBoundary;","// import React from 'react'; // Use this if we're writing 'React.Component' in full below\nimport React, { Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n//import { robots } from './robots'; // Only needed in Version 3. In Version 4, we're requesting this info from RESTful API elsewhere\nimport './App.css';\n\n// Learned in 212: Building a React App 3\n\n// Version 3\n// Added a searchbox, but it doesn't do anything at the moment\n\n// const App = () => {\n//     return (\n//         <div className='tc'>\n//             <h1>RoboFriends</h1>\n//             <SearchBox />\n//             <CardList robots={robots} />\n//         </div>\n//     )\n// }\n\n// Version 3.1\n// Searchbox sends its input to App, which generates filteredRobots\n// But it doesn't get passed down to CardList\n\n// class App extends React.Compoent {\n// Long-version. To use the shorthand below, import { Component } from React\n\n// class App extends Component { // Add when making reactive components\n//     constructor() { // Add when making reactive components\n//         super();    // Add when making reactive components\n//         this.state = {\n//             database: robots,\n//             searchfield: ''\n//         }\n//     }\n\n//     onSearchChange = (event) => {\n\n//         // Use the setState() method to assign event.target.value to searchfield\n//         this.setState({ searchfield: event.target.value }); \n\n//         // With searchfield changing everytime there's a new input, the filter works\n//         const filteredRobots = this.state.database.filter(robot => {\n//             return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n//         })\n//         console.log(filteredRobots);\n//         // console.log(event.target.value);\n//     }\n\n//     render () {\n//         return (\n//             <div className='tc'>\n//                 <h1>RoboFriends</h1>\n//                 <SearchBox searchchange={this.onSearchChange} />\n//                 <CardList robots={this.state.database} />\n//             </div>\n//         )\n//     }\n// }\n\n// Version 3.2\n\n// class App extends React.Compoent {\n// Long-version. To use the shorthand below, import { Component } from React\n\n// class App extends Component { // Add when making reactive components\n//     constructor() { // Add when making reactive components\n//         super();    // Add when making reactive components\n//         this.state = {\n//             database: robots,\n//             searchfield: ''\n//         }\n//     }\n\n//     onSearchChange = (event) => {\n//         // Use the setState() method to assign event.target.value to searchfield\n//         this.setState({ searchfield: event.target.value }); \n//     }\n\n//     render() {\n//         const filteredRobots = this.state.database.filter(robot => {\n//             return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n//         })\n//         console.log(filteredRobots);\n//         return (\n//             <div className='tc'>\n//                 <h1 className='f1'>RoboFriends</h1>\n//                 <SearchBox searchchange={this.onSearchChange} />\n//                 <CardList robots={filteredRobots} />\n//             </div>\n//         )\n//     }\n// }\n\n// Learned in 212: Building a React App 4\n// Version 4\n\n// class App extends Component { // Add when making reactive components\n//     constructor() { // Add when making reactive components\n//         super();    // Add when making reactive components\n//         this.state = {\n//             database: [],\n//             searchfield: ''\n//         }\n//         console.log('constructor');\n//     }\n\n//     componentDidMount() {\n//         fetch('https://jsonplaceholder.typicode.com/users') // Fetching the user data from a server elsewhere\n//             .then(response => response.json())\n//             .then(users => {\n//                 this.setState({database: users});\n//             });\n//         console.log('componentDidMount');\n//     }\n\n//     //\n\n//     onSearchChange = (event) => {\n//         // Use the setState() method to assign event.target.value to searchfield\n//         this.setState({ searchfield: event.target.value }); \n//     }\n \n//     render() {\n//         const filteredRobots = this.state.database.filter(robot => {\n//             return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n//         })\n//         console.log('render');\n//         if (this.state.database.length === 0) {\n//             return <h1>Loading</h1>\n//         } else {\n//             return (\n//                 <div className='tc'>\n//                     <h1 className='f1'>RoboFriends</h1>\n//                     <SearchBox searchchange={this.onSearchChange} />\n//                     <CardList robots={filteredRobots} />\n//                 </div>\n//             )\n//        }\n//     }\n// }\n\n// Learned in 215: Building a React App 5\n// Version 5\n// Added <Scroll>\n\n// class App extends Component { // Add when making reactive components\n//     constructor() { // Add when making reactive components\n//         super();    // Add when making reactive components\n//         this.state = {\n//             database: [],\n//             searchfield: ''\n//         }\n//         console.log('constructor');\n//     }\n\n//     componentDidMount() {\n//         fetch('https://jsonplaceholder.typicode.com/users') // Fetching the user data from a server elsewhere\n//             .then(response => response.json())\n//             .then(users => {\n//                 this.setState({database: users});\n//             });\n//         console.log('componentDidMount');\n//     }\n\n//     //\n\n//     onSearchChange = (event) => {\n//         // Use the setState() method to assign event.target.value to searchfield\n//         this.setState({ searchfield: event.target.value }); \n//     }\n \n//     render() {\n//         const filteredRobots = this.state.database.filter(robot => {\n//             return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n//         })\n//         console.log('render');\n//         if (this.state.database.length === 0) {\n//             return <h1>Loading</h1>\n//         } else {\n//             return (\n//                 <div className='tc'>\n//                     <h1 className='f1'>RoboFriends</h1>\n//                     <SearchBox searchchange={this.onSearchChange} />\n//                     <Scroll>\n//                         <CardList robots={filteredRobots} />\n//                     </Scroll>\n//                 </div>\n//             )\n//        }\n//     }\n// }\n\n// Version 6\n// Destructured to make the code cleaner\n\nclass App extends Component { // Add when making reactive components\n    constructor() { // Add when making reactive components\n        super();    // Add when making reactive components\n        this.state = {\n            database: [],\n            searchfield: ''\n        }\n        console.log('constructor');\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users') // Fetching the user data from a server elsewhere\n            .then(response => response.json())\n            .then(users => {\n                this.setState({database: users});\n            });\n        console.log('componentDidMount');\n    }\n\n    //\n\n    onSearchChange = (event) => {\n        // Use the setState() method to assign event.target.value to searchfield\n        this.setState({ searchfield: event.target.value }); \n    }\n \n    render() {\n        const {searchfield, database} = this.state;\n        const filteredRobots = database.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        console.log('render');\n\n        // Removed if else with return <condition> ? A : B syntax. Cleaner!\n        \n        return !database.length ? // Shorter, better way to write database.length === 0\n        <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchchange={this.onSearchChange} />\n                    <Scroll>\n                        {/* Added in 202: Error Boundary */}\n                        <ErrorBoundary>\n                        <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n       }\n    }\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card'; // Only used in Version 1\n// import CardList from './CardList'; // Only used in Version 2\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import { robots } from './robots'; // Only used in Version 2\n\n// Learned in 209: Building A React App 1\n// Version 1\n// Manually define id, name and email for each card\n// Pass these parameters over to Card.js\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <div>\n//       <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n//       <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n//       <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n//     </div>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// Learned in 211: Building a React App 2\n// Version 2\n// Added a Card List\n// Shifted all this code above to CardList.js\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <CardList robots={robots} />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// Learned in 212: Building a React App 3\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}